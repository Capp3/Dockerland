version: "3.7"
########################### Networks
networks:
  marketplace:
    external: true
  warehouse:
    external: true
  socket_proxy:
    external: true
  local1:
    driver: bridge  
  rollcall:
    driver: macvlan
    driver_opts: 
      parent: enp1s0
    ipam:
      config: 
        - subnet: 192.168.1.100/30
########################### SERVICES

volumes: 
  portainer_data:

services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    networks: 
      rollcall:
        ipv4_address: ${PIHOLEIPADDR}
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLEGUIPASSWORD}
      DNS1: 127.0.0.1
      DNS2: 1.0.0.1
    volumes:
      - ${CONFIGDIR}/pihole/pihole_etc:/etc/pihole
      - ${CONFIGDIR}/pihole/pihole_dnsmasq:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
    restart: unless-stopped

  # cf-ddns:
  #   container_name: cf-ddns
  #   image: oznu/cloudflare-ddns:latest
  #   restart: always
  #   environment:
  #     - API_KEY=${CF_DDNS_API_KEY}
  #     - ZONE=${DOMAINNAME}
  #     - PROXIED=true
  #     - RRTYPE=A
  #     - DELETE_ON_STOP=false
  #     - DNS_SERVER=1.1.1.1

  # openproject:
  #   image: openproject/community:11
  #   container_name: openproject
  #   networks:
  #     marketplace:
  #       ipv4_address: 192.168.90.13
  #     socket_proxy:
  #   environment: 
  #     - SECRET_KEY_BASE=${OPENPROJECT_SECRET_KEY_BASE}
  #   volumes: 
  #     - ${OPENPROJECTDIR}/pgdata:/var/openproject/pgdata
  #     - ${OPENPROJECTDIR}/assets:/var/openproject/assets
  #   tty: true
  #   ports:
  #     - 11080:80

  # vscode:
  #   image: codercom/code-server:latest
  #   container_name: vscode
  #   restart: unless-stopped
  #   networks:
  #     marketplace:
  #       ipv4_address: 192.168.90.17
  #   ports:
  #     - ${VSCODE_PORT}:8080
  #   volumes:
  #     - $USERDIR/server:/home/coder/server
  #     - $DOCKERDIR:/home/coder/docker
  #     - $USERDIR/Downloads:/home/coder/Downloads
  #     - $DOCKERDIR/vscode:/home/coder
  #     - /media/sdocker:/home/coder/sdocker
  #   environment:
  #     PASSWORD: $VSCODE_PASSWORD
  #     # Run as root first, create the directories, then change permissions to user:docker and 775. Disable run as root below.
  #     user: $PUID:$PGID
  #     # user: "0"

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: always
    networks:
      marketplace:
    ports:
      # Public HTTP Port:
      - '80:80'
      # Public HTTPS Port:
      - '443:443'
      # Admin Web Port:
      - '81:81'
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      # These are the settings to access your db
      DB_MYSQL_HOST: "nginxdb"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
      # If you would rather use Sqlite uncomment this
      # and remove all DB_MYSQL_* lines above
      # DB_SQLITE_FILE: "/data/database.sqlite"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - /local/data/nginx:/data
      - /local/data/letsencrypt:/etc/letsencrypt
    labels: 
      - com.centurylinklabs.watchtower.enable="false"
    depends_on:
      - nginxdb

  nginxdb:
    image: 'jc21/mariadb-aria:latest'
    restart: always
    networks:
      marketplace:
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    labels: 
      - com.centurylinklabs.watchtower.enable="false"
    volumes:
      - /local/data/mysql:/var/lib/mysql
    
  watchtower:
    image: containrrr/watchtower 
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # portainer-ce:
  #   ports:
  #       - '8000:8000'
  #       - '9000:9000'
  #   container_name: portainer
  #   restart: always
  #   volumes:
  #       - '/var/run/docker.sock:/var/run/docker.sock'
  #       - 'portainer_data:/data'
  #   image: portainer/portainer-ce

  agent:
    ports:
        - '9001:9001'
    container_name: portainer_agent
    restart: always
    volumes:
        - '/var/run/docker.sock:/var/run/docker.sock'
        - '/var/lib/docker/volumes:/var/lib/docker/volumes'
    image: portainer/agent