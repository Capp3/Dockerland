version: "3.7"
########################### Networks
networks:
  marketplace:
    external: true
  warehouse:
    external: true
  local1:
    driver: bridge    
  rollcall:
    driver: macvlan
    driver_opts: 
      parent: enp1s0
    ipam:
      config: 
        - subnet: 192.168.1.0/24
########################### SERVICES
services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    networks: 
      rollcall:
        ipv4_address: ${PIHOLEIPADDR}
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLEGUIPASSWORD}
      DNS1: 127.0.0.1
      DNS2: 1.0.0.1
    volumes:
      - ${CONFIGDIR}/pihole/pihole_etc:/etc/pihole
      - ${CONFIGDIR}/pihole/pihole_dnsmasq:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
    restart: unless-stopped

  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=${CF_DDNS_API_KEY}
      - ZONE=${DOMAINNAME}
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

  delugevpn:
    image: binhex/arch-delugevpn
    container_name: delugevpn
    networks:
      marketplace:
        ipv4_address: 10.0.1.28
    environment: 
      - TZ=${TZ}
      - VPN_ENABLED=yes
      - VPN_USER=${VPNUSER}
      - VPN_PASS=${VPNPASSWORD}
      - VPN_PROV=${VPNPROVIDER}
      - STRICT_PORT_FORWARD=no 
      - ENABLE_PRIVOXY=yes
      - LAN_NETWORK=${SETNETWORK}
      - NAME_SERVERS=${DNSSERVERS}
      - DELUGE_DAEMON_LOG_LEVEL=info
      - DELUGE_WEB_LOG_LEVEL=info
      - ADDITIONAL_PORTS=1234
      - DEBUG=false
      - UMASK=${DELUGE_UMASK}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes: 
      - ${CONFIGDIR}/deluge/config:/config
      - ${CONFIGDIR}/deluge/data:/data
      - ${TEMPDIR}:/tmp 
      - ${DOWNLOADDIR}:/downloads
      - ${WATCHDIR}:/watch 
    tty: true
    networks:
      - marketplace
    cap_add: 
      - NET_ADMIN
    ports: 
      - 58846:58846
      - 58946:58946
      - ${DELUGEPORT}:8112
      - ${PRIVOXYPORT}:8118
    restart: unless-stopped
  
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    networks:
      marketplace:
        ipv4_address: 10.0.1.32
      local1:
    environment: 
      - TZ=${TZ}
      - PGID=${PGID}
      - PUID=${PUID}
    volumes: 
      - ${CONFIGDIR}/jackett:/config
      - ${WATCHDIR}:/watch
    tty: true
    networks:
      - marketplace
    ports: 
      - 6003:9117
    restart: unless-stopped

  dokuwiki:
    image: ghcr.io/linuxserver/dokuwiki
    container_name: dokuwiki
    networks:
      marketplace:
        ipv4_address: 10.0.1.37
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /local/dokuwiki/config:/config
    ports:
      - ${DOCUWIKIPORT}:80
      - ${DOCUWIKIHTTPS}:443 #optional
    restart: unless-stopped

  tautulli:
    image: ghcr.io/linuxserver/tautulli
    container_name: tautulli
    networks:
      marketplace:
        ipv4_address: 10.0.1.31
      local1:
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIGDIR}/tautulli:/config
    ports:
      - ${TAUTULLIPORT}:8181
    restart: unless-stopped

  bookstack:
    image: ghcr.io/linuxserver/bookstack
    container_name: bookstack
    networks:
      marketplace:
        ipv4_address: 10.0.1.35
      local1:
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - APP_URL=http://192.168.1.2:${BOOKSTACKPORT}
      - DB_HOST=bookstack_db
      - DB_USER=bookstack
      - DB_PASS=${BS_DB_PASSWD}
      - DB_DATABASE=bookstackapp
    volumes:
      - /local/bookstack/config:/config
    ports:
      - ${BOOKSTACKPORT}:80
    restart: unless-stopped
    depends_on:
      - bookstack_db

  bookstack_db:
    image: ghcr.io/linuxserver/mariadb
    container_name: bookstack_db
    networks:
      marketplace:
        ipv4_address: 10.0.1.33
      local1:
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - MYSQL_ROOT_PASSWORD=${BS_DB_ROOT_PASSWD}
      - TZ=${TZ}
      - MYSQL_DATABASE=bookstackapp
      - MYSQL_USER=bookstack
      - MYSQL_PASSWORD=${BS_DB_PASSWD}
    volumes:
      - /local/bookstack/dbconfig:/config
    restart: unless-stopped

  traefik:
    container_name: traefik
    image: traefik:2.2.1
    restart: unless-stopped
    networks: 
      marketplace:
        ipv4_address: 10.0.1.254
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    security_opt:
      - no-new-privileges:true
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAINNAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=marketplace
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAINNAME}`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAINNAME}"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAINNAME}"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file"