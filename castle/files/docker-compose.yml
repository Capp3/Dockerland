version: "3.7"

########################### NETWORKS
networks:
  marketplace:
    external: true
  homeland:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  homelab:
    name: homelab_lan0
    driver: macvlan
    driver_opts: 
      parent: enp1s0
    ipam:
      driver: default
      config: 
        - subnet: 192.168.1.0/24

########################### VOLUMES
# volumes:


########################### SERVICES

services:

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    networks: 
      marketplace:
      homelab:
        ipv4_address: $PIHOLEIPADDR
    # ports:
    #   - 53:53/tcp
    #   - 53:53/udp
    #   - 67:67/udp
    #   - 80:80/tcp
    #   - 443:443/tcp
    environment:
      TZ: $TZ
      WEBPASSWORD: $PIHOLEGUIPASSWORD
      DNS1: 127.0.0.1
      DNS2: 1.0.0.1
    volumes:
      - $CONFIGDIR/pihole/etc/:/etc/pihole
      - $CONFIGDIR/pihole/dnsmasq:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    tty: true
    dns:
      - 127.0.0.1
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.pihole-rtr.entrypoints=https"
      - "traefik.http.routers.pihole-rtr.rule=Host(`pihole.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.pihole-rtr.middlewares=secure-chain@file,add-admin@file"
      ## HTTP Services
      - "traefik.http.routers.pihole-rtr.service=pihole-svc"
      - "traefik.http.services.pihole-svc.loadbalancer.server.port=80"

  ftp-server:
    image: fauria/vsftpd
    container_name: ftp_server
    environment:
      - FTP_USER=$FTP_USER
      - FTP_PASS=$FTP_PASS
    volumes: 
    - $CONFIGDIR/ftp:/var/log/vsftpd
    - $CONFIGDIR:/home/vsftpd
    tty: true
    networks:
      homeland:
    ports: 
        - 20:20
        - 21:21
    restart: unless-stopped

  delugevpn:
    image: binhex/arch-delugevpn
    container_name: delugevpn
    networks: 
      marketplace:
      homeland:
    environment: 
      - TZ=$TZ
      - VPN_ENABLED=yes
      - VPN_USER=$VPNUSER
      - VPN_PASS=$VPNPASSWORD
      - VPN_PROV=$VPNPROVIDER
      - STRICT_PORT_FORWARD=no 
      - ENABLE_PRIVOXY=yes
      - LAN_NETWORK=$SETNETWORK
      - NAME_SERVERS=$DNSSERVERS
      - DELUGE_DAEMON_LOG_LEVEL=info
      - DELUGE_WEB_LOG_LEVEL=info
      - ADDITIONAL_PORTS=1234
      - DEBUG=false
      - UMASK=$DELUGEUMASK
      - PUID=$DELUGEPUID
      - PGID=$DELUGEPGID
    volumes: 
       - $CONFIGDIR/deluge/config:/config
       - $CONFIGDIR/deluge/data:/data
       - $TEMPDIR:/tmp 
       - $DOWNLOADDIR:/downloads
       - $WATCHDIR:/watch 
    tty: true
    cap_add: 
      - NET_ADMIN
    ports: 
      - 58846:58846
      - 58946:58946
      - $DELUGEPORT:8112
      - $PRIVOXYPORT:8118
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    networks: 
      homeland:
    environment: 
      - TZ=$TZ
      - PGID=$PGID
      - PUID=$PUID
    volumes: 
      - $CONFIGDIR/jackett:/config
      - $WATCHDIR:/watch
    tty: true
    ports: 
      - $JACKETTPORT:9117
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment: 
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - UMASK_SET=002
    volumes: 
      - $CONFIGDIR/radarr:/config
      - $MOVIESDIR:/movies
      - $MOVIEDROPDIR:/downloads
    tty: true
    networks:
      homeland:
      marketplace:
    ports: 
      - $RADARRPORT:7878
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=10"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"
      ## API Forward Auth Bypass
      - "traefik.http.routers.radarr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-bypass.priority=20"
      - "traefik.http.routers.radarr-bypass.service=radarr-svc"

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment: 
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      # - UMASK_SET=000
    volumes:
      - $CONFIGDIR/sonarr:/config
      - ${TVDIR}:/tv
      - ${TVDROPDIR}:/downloads
    tty: true
    networks:
      marketplace:
      homeland:
    ports:
      - ${SONARRPORT}:8989
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=10"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
      ## API Forward Auth Bypass
      - "traefik.http.routers.sonarr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-bypass.priority=20"
      - "traefik.http.routers.sonarr-bypass.service=sonarr-svc"

  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:stable
    # devices:
    #   - /dev/ttyUSB0:/dev/ttyUSB0
    #   - /dev/ttyUSB1:/dev/ttyUSB1
    #   - /dev/ttyACM0:/dev/ttyACM0
    volumes:
      - $HOMEASSISCONFIGDIR:/config
    environment:
      - TZ=$TZ
    restart: always
    networks:
      marketplace:
      homelab:
        ipv4_address: $HOMEASSISTIPADDR
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.hass-rtr.entrypoints=https"
      - "traefik.http.routers.hass-rtr.rule=Host(`hass.$DOMAINNAME`)"
      - "traefik.http.routers.hass-rtr.priority=10"
      ## Middlewares
      - "traefik.http.routers.hass-rtr.middlewares=secure-headers@file"
      ## HTTP Services
      - "traefik.http.routers.hass-rtr.service=hass-svc"
      - "traefik.http.services.hass-svc.loadbalancer.server.port=8123"
      ## API Forward Auth Bypass
      - "traefik.http.routers.hass-bypass.entrypoints=https"
      - "traefik.http.routers.hass-bypass.rule=(Host(`hass.$DOMAINNAME`) && PathPrefix(`/api/`))"
      - "traefik.http.routers.hass-bypass.priority=20"
      - "traefik.http.routers.hass-bypass.middlewares=secure-headers@file"
      - "traefik.http.routers.hass-bypass.service=hass-svc"
      
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    networks: 
      homeland:
    restart: always
    environment:
      - API_KEY=${CLOUDFLARE_TRFK_API}
      - ZONE=$DOMAINNAME
      # - SUBDOMAIN=monitor
      - PROXIED=true

  whoami:
    image: "containous/whoami"
    container_name: "whoami"
    networks:
      homeland:
      marketplace:
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.whoami-rtr.entrypoints=https"
      - "traefik.http.routers.whoami-rtr.rule=Host(`whoami.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.whoami-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.whoami-rtr.service=whoami-svc"
      - "traefik.http.services.whoami-svc.loadbalancer.server.port=80"

  ombi:
    container_name: ombi
    image: linuxserver/ombi:latest
    restart: always
    networks:
      marketplace:
      homeland:
#    ports:
#      - "3579:3579"
    security_opt:
      - no-new-privileges:true
    volumes:
      - $CONFIGDIR/docker/ombi:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.ombi-rtr.entrypoints=https"
      - "traefik.http.routers.ombi-rtr.rule=Host(`ombi.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.ombi-rtr.middlewares=secure-headers@file,rate-limit@file"
      ## HTTP Services
      - "traefik.http.routers.ombi-rtr.service=ombi-svc"
      - "traefik.http.services.ombi-svc.loadbalancer.server.port=3579"
