version: '3.2'
# execute with
# docker stack deploy -c management-agent-stack.yml management

volumes:
  portainer_data:

services:
  agent:
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - marketplace:
          external: true
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
      # Frontend
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.frontend.entrypoints=https"
      - "traefik.http.services.frontend.loadbalancer.server.port=9000"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.tls.certresolver=leresolver"
      # Edge
      - "traefik.http.routers.edge.rule=Host(`edge.$DOMAINNAME`)"
      - "traefik.http.routers.edge.entrypoints=https"
      - "traefik.http.services.edge.loadbalancer.server.port=8000"
      - "traefik.http.routers.edge.service=edge"
      - "traefik.http.routers.edge.tls.certresolver=leresolver"

  heimdall:
    image: linuxserver/heimdall:latest
    env_file: /var/data/config/autopirate/heimdall.env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /netdata/heimdall:/config
    networks:
      - internal
    deploy:
      mode: replicated
      replicas: 1
    labels:
      # traefik
      - traefik.enable=true
      - traefik.docker.network=traefik_public
      # traefikv2
      - "traefik.http.routers.heimdall.rule=Host(`heimdall.example.com`)"
      - "traefik.http.routers.heimdall.entrypoints=https"
      - "traefik.http.services.heimdall.loadbalancer.server.port=80"
      - "traefik.http.routers.heimdall.middlewares=forward-auth"

  traefik:
    image: traefik:v2.2.1
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.traefik-public.traefik-public-certificates == true
      networks:
        marketplace:
      labels:
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=marketplace
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`$DOMAINNAME`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=leresolver
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
        - "traefik.enable=true"
        # HTTP-to-HTTPS Redirect
        - "traefik.http.routers.http-catchall.entrypoints=http"
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # HTTP Routers
        - "traefik.http.routers.traefik-rtr.entrypoints=https"
        - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
        - "traefik.http.routers.traefik-rtr.tls=true"
        # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
        - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
        - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
        - "traefik.http.routers.traefik-rtr.service=api@internal"
        - "traefik.http.routers.traefik-rtr.middlewares=traefik-headers,middlewares-rate-limit@file,middlewares-basic-auth@file" 
        - "traefik.http.middlewares.traefik-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT"
        - "traefik.http.middlewares.traefik-headers.headers.accesscontrolalloworiginlist=https://$DOMAINNAME"
        - "traefik.http.middlewares.traefik-headers.headers.accesscontrolmaxage=100"
        - "traefik.http.middlewares.traefik-headers.headers.addvaryheader=true" 
        - "traefik.http.middlewares.traefik-headers.headers.allowedhosts=traefik.$DOMAINNAME" 
        - "traefik.http.middlewares.traefik-headers.headers.hostsproxyheaders=X-Forwarded-Host"
        - "traefik.http.middlewares.traefik-headers.headers.sslredirect=true"
        - "traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.$DOMAINNAME" 
        - "traefik.http.middlewares.traefik-headers.headers.sslforcehost=true"
        - "traefik.http.middlewares.traefik-headers.headers.sslproxyheaders.X-Forwarded-Proto=https"
        - "traefik.http.middlewares.traefik-headers.headers.stsseconds=63072000"
        - "traefik.http.middlewares.traefik-headers.headers.stsincludesubdomains=true"
        - "traefik.http.middlewares.traefik-headers.headers.stspreload=true"
        - "traefik.http.middlewares.traefik-headers.headers.forcestsheader=true"
        - "traefik.http.middlewares.traefik-headers.headers.framedeny=true"
  #      - "traefik.http.middlewares.traefik-headers.headers.customframeoptionsvalue=SAMEORIGIN" # This option overrides FrameDeny
        - "traefik.http.middlewares.traefik-headers.headers.contenttypenosniff=true"
        - "traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true"
  #      - "traefik.http.middlewares.traefik-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; base-uri 'none';"
        - "traefik.http.middlewares.traefik-headers.headers.referrerpolicy=same-origin"
        - "traefik.http.middlewares.traefik-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
        - "traefik.http.middlewares.traefik-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - /netdata/config/traefik2/certs:/certificates
        - /netdata/config/traefik2/rules:/rules 
        - /netdata/config/traefik2/traefik.log:/traefik.log 
        - /netdata/config/traefik2/shared:/shared
      command:
        - --global.checkNewVersion=true
        - --global.sendAnonymousUsage=false
        - --entryPoints.http.address=:80
        - --entryPoints.https.address=:443
          # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
        - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
        - --entryPoints.traefik.address=:8080
        - --api=true
  #      - --api.insecure=true
  #      - --serversTransport.insecureSkipVerify=true
        - --log=true
        - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
        - --accessLog=true
        - --accessLog.filePath=/traefik.log
        - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
        - --accessLog.filters.statusCodes=400-499
        - --providers.docker=true
        - --providers.docker.endpoint=unix:///var/run/docker.sock
        - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
        - --providers.docker.exposedByDefault=false
        - --providers.docker.network=homeland
        - --providers.docker.swarmMode=false
        - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
  #      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
        - --providers.file.watch=true # Only works on top level files in the rules folder
        - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
        - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
        - --certificatesResolvers.dns-cloudflare.acme.storage=/certs/acme.json
        - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
        - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
        - --providers.docker.swarmmode
        - --certificatesresolvers.dns-cloudflare.acme.tlschallenge=true


