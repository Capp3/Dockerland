version: "3.7"

########################### NETWORKS
networks:
  homeland:
    driver: bridge
  t2_proxy:
    driver: bridge
  homelab:
    name: homelab_lan
    driver: macvlan
    driver_opts: 
      parent: enp1s0
    ipam:
      driver: default
      config: 
        - subnet: 192.168.1.0/24

########################### VOLUMES
volumes:
  jackett_config:
  radarr_config:
  sonarr_config:
  noip:

########################### SERVICES
services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    networks: 
      homelab:
        ipv4_address: ${PIHOLEIPADDR}      # homelab:
    # ports:
    #   - 53:53/tcp
    #   - 53:53/udp
    #   - 67:67/udp
    #   - 80:80/tcp
    #   - 443:443/tcp
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLEGUIPASSWORD}
      DNS1: 127.0.0.1
      DNS2: 1.0.0.1
    volumes:
      - ${CONFIGDIR}/pihole/etc/:/etc/pihole
      - ${CONFIGDIR}/pihole/dnsmasq:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    tty: true
    dns:
      - 127.0.0.1

  delugevpn:
    image: binhex/arch-delugevpn
    container_name: delugevpn
    networks: 
      homeland:
    environment: 
      - TZ=${TZ}
      - VPN_ENABLED=yes
      - VPN_USER=${VPNUSER}
      - VPN_PASS=${VPNPASSWORD}
      - VPN_PROV=${VPNPROVIDER}
      - STRICT_PORT_FORWARD=no 
      - ENABLE_PRIVOXY=yes
      - LAN_NETWORK=${SETNETWORK}
      - NAME_SERVERS=${DNSSERVERS}
      - DELUGE_DAEMON_LOG_LEVEL=info
      - DELUGE_WEB_LOG_LEVEL=info
      - ADDITIONAL_PORTS=1234
      - DEBUG=false
      - UMASK=${DELUGEUMASK}
      - PUID=${DELUGEPUID}
      - PGID=${DELUGEPGID}
    volumes: 
       - ${CONFIGDIR}/deluge/config:/config
       - ${CONFIGDIR}/deluge/data:/data
       - ${TEMPDIR}:/tmp 
       - ${DOWNLOADDIR}:/downloads
       - ${WATCHDIR}:/watch 
    tty: true
    cap_add: 
      - NET_ADMIN
    ports: 
      - 58846:58846
      - 58946:58946
      - ${DELUGEPORT}:8112
      - ${PRIVOXYPORT}:8118
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    networks: 
      homeland:
    environment: 
      - TZ=${TZ}
      - PGID=${PGID}
      - PUID=${PUID}
    volumes: 
      - jackett_config:/config
      - ${WATCHDIR}:/watch
    tty: true
    ports: 
      - ${JACKETTPORT}:9117
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment: 
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
    volumes: 
      - radarr_config:/config
      - ${MOVIESDIR}:/movies
      - ${MOVIEDROPDIR}:/downloads
    tty: true
    networks:
      homeland:
    ports: 
      - ${RADARRPORT}:7878
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment: 
      - PUID=${PUID}
      - PGID=${PGID}
      # - UMASK_SET=000
    volumes:
      - sonarr_config:/config
      - ${TVDIR}:/tv
      - ${TVDROPDIR}:/downloads
    tty: true
    networks:
      homeland:
    ports:
      - ${SONARRPORT}:8989
    restart: unless-stopped

  duc:
    image: romeupalos/noip
    container_name: noip_duc
    environment: 
      - TZ=${TZ}
    volumes: 
      - noip:/usr/local/etc/
    tty: true
    networks:
      homeland:
    restart: unless-stopped

  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:stable
    # devices:
    #   - /dev/ttyUSB0:/dev/ttyUSB0
    #   - /dev/ttyUSB1:/dev/ttyUSB1
    #   - /dev/ttyACM0:/dev/ttyACM0
    volumes:
      - ${HOMEASSISCONFIGDIR}:/config
    environment:
      - TZ=${TZ}
    restart: always
    networks:
      homelab:
        ipv4_address: ${HOMEASSISTIPADDR}
      
  traefik:
    container_name: traefik
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    networks:
      homeland:
      # homelab:
      #   ipv4_address: ${TRFKIPADDR}
    ports: 
      - ${TRFKHTTP}:80
      - ${TRFKHTTPS}:443
      - ${TRFK}:8080
    environment:
      - TRAEFIK_GLOBAL_CHECKNEWVERSION=false
      - TRAEFIK_ACCESSLOG=true
      - TRAEFIK_ACCESSLOG_BUFFERINGSIZE=100
      - TRAEFIK_ACCESSLOG_FILEPATH=/traefik.log
      - TRAEFIK_GLOBAL_SENDANONYMOUSUSAGE=false
      - TRAEFIK_API=true
      - TRAEFIK_LOG=true
      - TRAEFIK_LOG_LEVEL=DEBUG
      - TRAEFIK_ACCESSLOG_FILTERS_STATUSCODES=400-499
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_DEFAULTRULE=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_PROVIDERS_DOCKER_NETWORK=
      - TRAEFIK_PROVIDERS_DOCKER_SWARMMODE=false
      - TRAEFIK_PROVIDERS_FILE_DIRECTORY=/rules
      - TRAEFIK_PROVIDERS_FILE_WATCH=true
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    command:
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    volumes:
      - ${DOCKERDIR}/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKERDIR}/traefik2/acme/acme.json:/acme.json 
      - ${DOCKERDIR}/traefik2/traefik.log:/traefik.log 
      - ${DOCKERDIR}/shared:/shared
    labels:
      - "traefik.enable=true"
      ## HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      ## HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" 

