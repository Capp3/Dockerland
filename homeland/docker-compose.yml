version: "3.7"

########################### NETWORKS
networks:
  homeland:
    driver: bridge
  # t2_proxy:
  #   driver: bridge
  homelab:
    name: homelab_lan0
    driver: macvlan
    driver_opts: 
      parent: enp1s0
    ipam:
      driver: default
      config: 
        - subnet: 192.168.1.0/24

########################### VOLUMES
volumes:


########################### SERVICES
services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    networks: 
      homelab:
        ipv4_address: $PIHOLEIPADDR      # homelab:
    # ports:
    #   - 53:53/tcp
    #   - 53:53/udp
    #   - 67:67/udp
    #   - 80:80/tcp
    #   - 443:443/tcp
    environment:
      TZ: $TZ
      WEBPASSWORD: $PIHOLEGUIPASSWORD
      DNS1: 127.0.0.1
      DNS2: 1.0.0.1
    volumes:
      - $CONFIGDIR/pihole/etc/:/etc/pihole
      - $CONFIGDIR/pihole/dnsmasq:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    tty: true
    dns:
      - 127.0.0.1

  ftp-server:
    image: fauria/vsftpd
    container_name: ftp_server
    environment:
      - FTP_USER=$FTP_USER
      - FTP_PASS=$FTP_PASS
    volumes: 
    - $CONFIGDIR/ftp:/var/log/vsftpd
    - $CONFIGDIR:/home/vsftpd
    tty: true
    network_mode: "bridge"
    ports: 
        - 20:20
        - 21:21
    restart: unless-stopped

  delugevpn:
    image: binhex/arch-delugevpn
    container_name: delugevpn
    networks: 
      homeland:
    environment: 
      - TZ=$TZ
      - VPN_ENABLED=yes
      - VPN_USER=$VPNUSER
      - VPN_PASS=$VPNPASSWORD
      - VPN_PROV=$VPNPROVIDER
      - STRICT_PORT_FORWARD=no 
      - ENABLE_PRIVOXY=yes
      - LAN_NETWORK=$SETNETWORK
      - NAME_SERVERS=$DNSSERVERS
      - DELUGE_DAEMON_LOG_LEVEL=info
      - DELUGE_WEB_LOG_LEVEL=info
      - ADDITIONAL_PORTS=1234
      - DEBUG=false
      - UMASK=$DELUGEUMASK
      - PUID=$DELUGEPUID
      - PGID=$DELUGEPGID
    volumes: 
       - $CONFIGDIR/deluge/config:/config
       - $CONFIGDIR/deluge/data:/data
       - $TEMPDIR:/tmp 
       - $DOWNLOADDIR:/downloads
       - $WATCHDIR:/watch 
    tty: true
    cap_add: 
      - NET_ADMIN
    ports: 
      - 58846:58846
      - 58946:58946
      - $DELUGEPORT:8112
      - $PRIVOXYPORT:8118
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    networks: 
      homeland:
    environment: 
      - TZ=$TZ
      - PGID=$PGID
      - PUID=$PUID
    volumes: 
      - $CONFIGDIR/jackett:/config
      - $WATCHDIR:/watch
    tty: true
    ports: 
      - $JACKETTPORT:9117
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment: 
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - UMASK_SET=002
    volumes: 
      - $CONFIGDIR/radarr:/config
      - $MOVIESDIR:/movies
      - $MOVIEDROPDIR:/downloads
    tty: true
    networks:
      homeland:
    ports: 
      - $RADARRPORT:7878
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment: 
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      # - UMASK_SET=000
    volumes:
      - $CONFIGDIR/sonarr:/config
      - ${TVDIR}:/tv
      - ${TVDROPDIR}:/downloads
    tty: true
    networks:
      homeland:
    ports:
      - ${SONARRPORT}:8989
    restart: unless-stopped

  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:stable
    # devices:
    #   - /dev/ttyUSB0:/dev/ttyUSB0
    #   - /dev/ttyUSB1:/dev/ttyUSB1
    #   - /dev/ttyACM0:/dev/ttyACM0
    volumes:
      - $HOMEASSISCONFIGDIR:/config
    environment:
      - TZ=$TZ
    restart: always
    networks:
      homelab:
        ipv4_address: $HOMEASSISTIPADDR
      
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    restart: always
    environment:
      - API_KEY=${CLOUDFLARE_TRFK_API}
      - ZONE=$DOMAINNAME
      # - SUBDOMAIN=monitor
      - PROXIED=true

  whoami:
    image: "containous/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.papercut.design`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=mydnschallenge"

  traefik:
    container_name: traefik
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    networks: 
      homeland:
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=homeland_homeland
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" 

