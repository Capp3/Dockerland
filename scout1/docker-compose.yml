########################### Networks
networks:
  local1:
    name: local1
    ipam:
      driver: default
      config:
        - subnet: "192.168.10.0/24"
  # marketplace:
  #   external: true
  # warehouse:
  #   external: true
  # local0:
  #   driver: bridge    
  #   ipam:
  #     config:
  #       - subnet: 192.168.0.0/24
  # rollcall:
  #   driver: macvlan
  #   driver_opts: 
  #     parent: wlan0
  #   ipam:
  #     config: 
  #       - subnet: 192.168.1.0/24

########################### Volumes
volumes:
  readsbpb_rrd:
  readsbpb_autogain:

########################### SERVICES
services: 
  # tvheadend:
  #   image: ghcr.io/linuxserver/tvheadend
  #   container_name: tvheadend
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     # - RUN_OPTS=<run options here> #optional
  #   volumes:
  #     - /data/tvh/config:/config
  #     - /data/tvh/recordings:/recordings
  #   network_mode: host
  #   # ports:
  #   #   - 9981:9981
  #   #   - 9982:9982
  #   devices:
  #     - /dev/dri:/dev/dri #optional
  #     - /dev/dvb:/dev/dvb #optional
  #   restart: unless-stopped

  agent:
    ports:
        - '9001:9001'
    container_name: portainer_agent
    networks:
      local1:
        ipv4_address: 192.168.10.60
    restart: always
    volumes:
        - '/var/run/docker.sock:/var/run/docker.sock'
        - '/var/lib/docker/volumes:/var/lib/docker/volumes'
    image: portainer/agent

  socketproxy:
    container_name: socketproxy
    image: tecnativa/docker-socket-proxy
    restart: always
    privileged: true
    ports:
      - '2376:2375'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  cloudflare-ddns-capparelli:
    container_name: ddns_capparelli
    image: oznu/cloudflare-ddns:latest
    restart: always
    networks:
      local1:
        ipv4_address: 192.168.10.61
    environment:
      - API_KEY=${CFDDNS0}
      - ZONE=${CFDDN_ZONE_0}

  readsb:
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest
    tty: true
    container_name: readsb
    hostname: readsb
    restart: always
    devices:
      - /dev/bus/usb:/dev/bus/usb
    ports:
      - 8090:8080
      - 30005:30005
    networks:
      local1:
        ipv4_address: 192.168.10.63
    environment:
      - TZ=${TZ}
      - READSB_DCFILTER=true
      - READSB_DEVICE_TYPE=rtlsdr
      - READSB_FIX=true
      - READSB_GAIN=autogain
      - READSB_LAT=${LAT}
      - READSB_LON=${LONG}
      - READSB_MODEAC=true
      - READSB_RX_LOCATION_ACCURACY=2
      - READSB_STATS_RANGE=true
      - READSB_NET_ENABLE=true
    volumes:
      - readsbpb_rrd:/run/collectd
      - readsbpb_autogain:/run/autogain
    tmpfs:
      - /run/readsb:size=64M
      - /var/log:size=32M

  adsbexchange:
    image: ghcr.io/sdr-enthusiasts/docker-adsbexchange:latest
    tty: true
    container_name: adsbx
    networks:
      local1:
        ipv4_address: 192.168.10.64
    restart: always
    depends_on:
      - readsb
    environment:
      - BEASTHOST=192.168.10.63
      - TZ=${TZ}
      - LAT=${LAT}
      - LONG=${LONG}
      - ALT=${ALT}
      - SITENAME=${ADSBSITENAME}
      - UUID=${ADSBUUID}
    tmpfs:
      - /run:rw,nosuid,nodev,exec,relatime,size=64M,uid=1000,gid=1000

  # piaware:
    # image: ghcr.io/sdr-enthusiasts/docker-piaware:latest
    # tty: true
    # container_name: piaware
    # restart: always
    # networks:
    #   local1:
    #     ipv4_address: 192.168.10.66
    # depends_on:
    #   - readsb
    # environment:
    #   - TZ=${TZ}
    #   - LAT=${LAT}
    #   - LONG=${LONG}
    #   - RECEIVER_TYPE=relay
    #   - BEASTHOST=192.168.10.63
    #   - BEASTPORT=30005
    #   - FEEDER_ID=${PIAWAREKEY}
    # tmpfs:
    #   - /run:exec,size=64M
    #   - /var/log

  vrs:
    image: ghcr.io/sdr-enthusiasts/vrs:latest
    tty: true
    container_name: vrs
    restart: unless-stopped
    depends_on:
      - readsb
    ports:
      - 8085:8080
    environment:
        - VRS_ADMIN_USERNAME=${VRS_USERNAME}
        - VRS_ADMIN_PASSWORD=${VRS_PASSWORD}
        - VRS_CULTURE=en-GB #see http://msdn.microsoft.com/en-us/goglobal/bb896001.aspx for a list of supported culture names. Not all translations may be available
        - VRS_DB_UPDATE_POLICY_FULLAUTO=yes #default unset / no
        - VRS_DB_UPDATE_WITH_VACUUM=yes #default unset / no
        - VRS_DB_UPDATE_BACKUP_UNCOMPRESSED=yes #default unset / compressed
        - VRS_ENHANCED_MARKERS=normal #default unset
        - VRS_ENHANCED_LAYERS_COUNTRY=UK #Currently available: UK,DE,USA1,USAAZ,SE,AU,IN,ID,NL,FR,ES
        - 'VRS_ENHANCED_LAYERS_CONFIG={

            /* Map Options */
            "defaultMap" : 6,                      /* 1: OpenStreetMap, 2: OpenStreetMap Dark, 3: OpenTopoMap, 4: WaterColour, 5: CartoDark, 6: Terrain, 7: Satellite */
            "layerMenuPosition" : "bottomleft",    /* Valid positions: topleft, topright, bottomleft or bottomright */

            /* Enable Layers */
            "airspace" : 0,
            "navAids" : 0,
            "tfrUSA" : 0,
            "seaMarkers" : 0,
            "trainMap" : 0,
            "clouds" : 0,
            "rain" : 0,
            "temps" : 0,
            "wind" : 0,
            "pressure" : 0,
            "dayNight" : 0,
            "civilAirfields" : 0,
            "militaryAirfields" : 0,
            "heliports" : 0,
            "glidingSpots" : 0
          }'
        - VRS_SBSHOST=192.168.1.210  #put IP or container name of data source here
        - VRS_SBSPORT=30005
        - VRS_ENHANCED_LAYERS_OPENWX_APIKEY=${OPENWX_API}
        - VRS_ENHANCED_LAYERS_OPENAIP_APIKEY=${OPENAPI_API}
        - VRS_ENHANCED_LAYERS_STADIA_APIKEY=${STADIA_API}
        - VRS_ENHANCED_LAYERS_THUNDERFOREST_APIKEY=${THUNDER_API}
        - VRS_SILHOUETTES_DUALVIEW=true
    tmpfs:
      - /tmp:rw,nosuid,nodev,noexec,relatime,size=128M
    volumes:
      - /opt/adsb/vrs:/root/.local/share/VirtualRadar
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  # tdarr-node:
  #   container_name: tdarr-node
  #   image: ghcr.io/haveagitgat/tdarr_node:latest
  #   restart: unless-stopped
  #   networks:
  #     local1:
  #       ipv4_address: 192.168.10.67
  #   environment:
  #     - TZ=Europe/Dublin
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - UMASK_SET=002
  #     - nodeID=scoutnode
  #     - serverIP=192.168.1.11
  #     - serverPort=8266
  #   volumes:
  #     - /docker/tdarr/configs:/app/configs
  #     - /docker/tdarr/logs:/app/logs
  #     - /media:/media
  #     - /transcode_cache:/temp