version: "3.8"

# Define networks first
networks:
  socket_proxy:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  k0_proxy:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24

# Define volumes
volumes:
  portainer_data:
  docker_gc_exclude:
  gluetun_data:
  deluge_config:
  deluge_downloads:
  flaresolverr_data:
  prowlarr_config:
  radarr_config:
  sonarr_config:
  bazarr_config:
  tdarr_data:
  tdarr_configs:
  tdarr_logs:
  jellyseerr_config:
  homepage_config:
  syncthing_config:
  syncthing_data:
  swag_config:
  authelia_config:
  authelia_redis:

services:
  # Core Services
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - socket_proxy
    ports:
      - "${PORTAINER_PORT}:9000"
    volumes:
      - ${DATA_DIR}/portainer/data:/data
    environment:
      - TZ=${TZ}
    command: -H tcp://socket-proxy:2375
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9000/api/status",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254
    privileged: true
    ports:
      - 2375:2375
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info
      - EVENTS=1
      - PING=1
      - VERSION=1
      - AUTH=0
      - SECRETS=0
      - POST=1
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - NODES=0
      - PLUGINS=0
      - SERVICES=1
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1
      - VOLUMES=1
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:2375/_ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  docker-gc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - socket_proxy
    volumes:
      - ${DATA_DIR}/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      - CRON=12 0 0 * * ?
      - FORCE_IMAGE_REMOVAL=1
      - FORCE_CONTAINER_REMOVAL=0
      - GRACE_PERIOD_SECONDS=604800
      - DRY_RUN=0
      - CLEAN_UP_VOLUMES=1
      - TZ=${TZ}
      - DOCKER_HOST=tcp://socket-proxy:2375

  # VPN and Media Services
  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    networks:
      k0_proxy:
        ipv4_address: 192.168.90.102
    ports:
      - ${DELUGE_GUI_PORT}:8112
      - 6881:6881
      - 6881:6881/udp
      - 58846:58846
      - ${FLARESOLVERR_PORT}:8191
      - ${PROWLARR_PORT}:9696
      - ${RADARR_PORT}:7878
      - ${SONARR_PORT}:8989
      - ${READARR_PORT}:8787
      - ${OVERSEERR_PORT}:5055
      - ${BAZARR_PORT}:6767
    volumes:
      - ${DATA_DIR}/gluetun:/gluetun
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      - VPN_SERVICE_PROVIDER=private internet access
      - OPENVPN_USER=${PIA_USER}
      - OPENVPN_PASSWORD=${PIA_PASS}
      - SERVER_REGIONS=Netherlands
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    restart: unless-stopped
    network_mode: "container:gluetun"
    volumes:
      - ${DATA_DIR}/deluge:/config
      - ${DATA_DIR}/downloads:/downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DELUGE_LOGLEVEL=error
    depends_on:
      gluetun:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8112"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Media Management Services
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    network_mode: "container:gluetun"
    volumes:
      - ${DATA_DIR}/prowlarr:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    depends_on:
      gluetun:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9696"]
      interval: 30s
      timeout: 10s
      retries: 3

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    network_mode: "container:gluetun"
    volumes:
      - ${DATA_DIR}/radarr:/config
      - ${MEDIADIR}/movies:/movies
      - ${DATA_DIR}/downloads:/downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    depends_on:
      gluetun:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878"]
      interval: 30s
      timeout: 10s
      retries: 3

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    network_mode: "container:gluetun"
    volumes:
      - ${DATA_DIR}/sonarr:/config
      - ${MEDIADIR}/tv:/tv
      - ${DATA_DIR}/downloads:/downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    depends_on:
      gluetun:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989"]
      interval: 30s
      timeout: 10s
      retries: 3

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    network_mode: "container:gluetun"
    volumes:
      - ${DATA_DIR}/bazarr/config:/config
      - ${MEDIADIR}/movies:/movies
      - ${MEDIADIR}/tv:/tv
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    depends_on:
      gluetun:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6767"]
      interval: 30s
      timeout: 10s
      retries: 3

  tdarr:
    image: haveagitgat/tdarr
    container_name: tdarr
    restart: unless-stopped
    network_mode: bridge
    tty: true
    stdin_open: true
    ports:
      - 8265:8265
      - 8266:8266
    volumes:
      - ${MEDIADIR}/movies:/home/Tdarr/Media/movies
      - ${MEDIADIR}/tv:/home/Tdarr/Media/tv
      - ${DATA_DIR}/downloads/cache/:/temp
      - ${DATA_DIR}/tdarr/data/:/app/server
      - ${DATA_DIR}/tdarr/data/:/app/configs
      - ${DATA_DIR}/tdarr/data/:/app/logs
    devices:
      - /dev/dri:/dev/dri
    environment:
      - serverIP=0.0.0.0
      - webUIPort=8265
      - serverPort=8266
      - TZ=${TZ}
      - internalNode=true
      - inContainer=true
      - PUID=${PUID}
      - PGID=${PGID}
      - nodeName=${HOSTNAME}
    logging:
      options:
        max-size: 10m
        max-file: 5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8265"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Services
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    ports:
      - ${HOMEPAGE_PORT}:3000
    volumes:
      - ${DATA_DIR}/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - HOMEPAGE_ALLOWED_HOSTS=${DOMAIN_NAME}
    networks:
      k0_proxy:
        ipv4_address: 192.168.90.111
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  swag:
    image: lscr.io/linuxserver/swag:latest
    container_name: swag
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - ${SWAG_SSL_PORT}:443
      - ${SWAG_PORT}:80
    volumes:
      - ${DATA_DIR}/swag/config:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - URL=${DOMAIN_NAME}
      - VALIDATION=${SWAG_VALIDATION}
      - SUBDOMAINS=${SWAG_SUBDOMAINS}
      - DNSPLUGIN=${SWAG_DNSPLUGIN}
      - PROPAGATION=30
      - EMAIL=${DNS_EMAIL}
      - SWAG_AUTORELOAD=true
    networks:
      k0_proxy:
        ipv4_address: 192.168.90.112
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:443"]
      interval: 30s
      timeout: 10s
      retries: 3

  authelia:
    image: authelia/authelia
    container_name: authelia
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "9091:9091"
    volumes:
      - ${DATA_DIR}/authelia/config:/config
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - REDIS_PASSWORD=${AUTH_REDIS_PASS}
      - AUTHELIA_JWT_SECRET=${AUTHELIA_SESSION_SECRET}
      - AUTHELIA_STORAGE_ENCRYPTION_KEY=${AUTHELIA_STOR_KEY}
    networks:
      k0_proxy:
        ipv4_address: 192.168.90.113
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:alpine
    container_name: auth_redis
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/authelia/redis:/data
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - REDIS_PASSWORD=${AUTH_REDIS_PASS}
    networks:
      k0_proxy:
        ipv4_address: 192.168.90.114
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
